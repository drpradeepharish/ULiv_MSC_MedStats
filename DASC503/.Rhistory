strTitle = "Regions",
strGroupBy = "sha",
strNameGroupBy = "Regions",
numCrudeGlobalIncidence =  numCrudeGlobalIncidence ,
lstYLim =  c(0,15)) %>%
fSavePlot("RegionOnly","", w = 6, h = 4)
fCalculateIncidence(tblNumerator, tblDenominator, c("sha")) %>%
mutate(sha = gsub("Yorkshire and the Humber", "Yorkshire \\& Humber", sha)) %>%
fPlotBoxIncidence(strX = "sha",
strY = "Incidence",
strTitle = "Regions",
strGroupBy = "sha",
strNameGroupBy = "Regions",
numCrudeGlobalIncidence =  numCrudeGlobalIncidence ,
lstYLim =  c(0,15)) %>%
fSavePlot("RegionOnly","", w = 8, h = 4)
fPlotBoxIncidence <- function(tblData, strX, strY, strTitle, strGroupBy, strNameGroupBy, strSmooth, numCrudeGlobalIncidence, lstYLim = c(0,100)) {
tblData %>%
ggplot(aes(
x = !!sym(strX),
y = !!sym(strY),
group = !!sym(strGroupBy),
colour = !!sym(strGroupBy)
)) +
scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
geom_hline(aes(yintercept = numCrudeGlobalIncidence)) +
geom_errorbar(aes(ymin = CI$lower, ymax = CI$upper), width = 0.05, alpha = 0.2) +
geom_boxplot(show.legend = FALSE) +
ggsci::scale_color_aaas() +
theme_cowplot(12) +
ylab("Incidence rate per 10k person years") +
xlab("") +
coord_cartesian(ylim = lstYLim) +
labs(colour = strNameGroupBy, title = strTitle)
}
lstGroupVar = c("sha", "ageband")
ggVarGroupBy = "sha"
ggNameGroupBy = "Regions"
strGraphTitle = "AgeSha"
strSmoother = "loess"
fCalculateIncidence(
tblGraphNumerator %>% filter(sex == "men"),
tblDenominator %>% filter(sex == "men"),
lstGroupVar
) -> tblTempMale
fCalculateIncidence(
tblGraphNumerator %>% filter(sex == "women"),
tblDenominator %>% filter(sex == "women"),
lstGroupVar
) -> tblTempFemale
fCalculateIncidence(tblGraphNumerator,
tblDenominator,
lstGroupVar) -> tblTemp
tblTempMale %>% fPlotIncidence(
strTitle = "Male",
strGroupBy = ggVarGroupBy,
strNameGroupBy = ggNameGroupBy,
strSmooth = strSmoother,
numCrudeGlobalIncidence = numCrudeGlobalIncidence
) -> ggTempMale
tblTempFemale %>% fPlotIncidence(
strTitle = "Female",
strGroupBy = ggVarGroupBy,
strNameGroupBy = ggNameGroupBy,
strSmooth = strSmoother,
numCrudeGlobalIncidence = numCrudeGlobalIncidence
) -> ggTempFemale
fCalculateIncidence(tblNumerator, tblDenominator, c("sha")) %>%
mutate(sha = gsub("Yorkshire and the Humber", "Yorkshire \\& Humber", sha)) %>%
fPlotBoxIncidence(strX = "sha",
strY = "Incidence",
strTitle = "Regions",
strGroupBy = "sha",
strNameGroupBy = "Regions",
numCrudeGlobalIncidence =  numCrudeGlobalIncidence ,
lstYLim =  c(0,15)) -> ggTemp
ggFig <- ggTemp + ggTempMale + ggTempFemale + plot_layout(axes = "collect", axis_titles = "collect", guides = "collect") & theme(legend.position = 'bottom')
ggFig %>% fSavePlot(strGraphTitle,strSmoother, w = 12, h = 6)
fPlotBoxIncidence <- function(tblData, strX, strY, strTitle, strGroupBy, strNameGroupBy, strSmooth, numCrudeGlobalIncidence, lstYLim = c(0,100)) {
tblData %>%
ggplot(aes(
x = !!sym(strX),
y = !!sym(strY),
group = !!sym(strGroupBy),
colour = !!sym(strGroupBy)
)) +
scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
geom_hline(aes(yintercept = numCrudeGlobalIncidence)) +
geom_errorbar(aes(ymin = CI$lower, ymax = CI$upper), width = 0.05, alpha = 0.2, show.legend = FALSE) +
geom_boxplot(show.legend = FALSE) +
ggsci::scale_color_aaas() +
theme_cowplot(12) +
ylab("Incidence rate per 10k person years") +
xlab("") +
coord_cartesian(ylim = lstYLim) +
labs(colour = strNameGroupBy, title = strTitle)
}
fPlotBoxIncidence <- function(tblData, strX, strY, strTitle, strGroupBy, strNameGroupBy, strSmooth, numCrudeGlobalIncidence, lstYLim = c(0,100)) {
tblData %>%
ggplot(aes(
x = !!sym(strX),
y = !!sym(strY),
group = !!sym(strGroupBy),
colour = !!sym(strGroupBy)
)) +
scale_x_discrete(guide = guide_axis(n.dodge = 3)) +
geom_hline(aes(yintercept = numCrudeGlobalIncidence)) +
geom_errorbar(aes(ymin = CI$lower, ymax = CI$upper), width = 0.05, alpha = 0.2, show.legend = FALSE) +
geom_boxplot(show.legend = FALSE) +
ggsci::scale_color_aaas() +
theme_cowplot(12) +
ylab("Incidence rate per 10k person years") +
xlab("") +
coord_cartesian(ylim = lstYLim) +
labs(colour = strNameGroupBy, title = strTitle)
}
fCalculateIncidence(tblNumerator, tblDenominator, c("sha")) %>%
mutate(sha = gsub("Yorkshire and the Humber", "Yorkshire \\& Humber", sha)) %>%
fPlotBoxIncidence(strX = "sha",
strY = "Incidence",
strTitle = "Regions",
strGroupBy = "sha",
strNameGroupBy = "Regions",
numCrudeGlobalIncidence =  numCrudeGlobalIncidence ,
lstYLim =  c(0,15))
lstGroupVar = c("sha", "ageband")
ggVarGroupBy = "sha"
ggNameGroupBy = "Regions"
strGraphTitle = "AgeSha"
strSmoother = "loess"
fCalculateIncidence(
tblGraphNumerator %>% filter(sex == "men"),
tblDenominator %>% filter(sex == "men"),
lstGroupVar
) -> tblTempMale
fCalculateIncidence(
tblGraphNumerator %>% filter(sex == "women"),
tblDenominator %>% filter(sex == "women"),
lstGroupVar
) -> tblTempFemale
fCalculateIncidence(tblGraphNumerator,
tblDenominator,
lstGroupVar) -> tblTemp
tblTempMale %>% fPlotIncidence(
strTitle = "Male",
strGroupBy = ggVarGroupBy,
strNameGroupBy = ggNameGroupBy,
strSmooth = strSmoother,
numCrudeGlobalIncidence = numCrudeGlobalIncidence
) -> ggTempMale
tblTempFemale %>% fPlotIncidence(
strTitle = "Female",
strGroupBy = ggVarGroupBy,
strNameGroupBy = ggNameGroupBy,
strSmooth = strSmoother,
numCrudeGlobalIncidence = numCrudeGlobalIncidence
) -> ggTempFemale
fCalculateIncidence(tblNumerator, tblDenominator, c("sha")) %>%
mutate(sha = gsub("Yorkshire and the Humber", "Yorkshire \\& Humber", sha)) %>%
fPlotBoxIncidence(strX = "sha",
strY = "Incidence",
strTitle = "Regions",
strGroupBy = "sha",
strNameGroupBy = "Regions",
numCrudeGlobalIncidence =  numCrudeGlobalIncidence ,
lstYLim =  c(0,15)) -> ggTemp
ggFig <- ggTemp + ggTempMale + ggTempFemale + plot_layout(axes = "collect", axis_titles = "collect", guides = "collect") & theme(legend.position = 'bottom')
ggFig %>% fSavePlot(strGraphTitle,strSmoother, w = 12, h = 6)
lstGroupVar = c("sha", "ageband")
ggVarGroupBy = "sha"
ggNameGroupBy = "Regions"
strGraphTitle = "AgeSha"
strSmoother = "loess"
fCalculateIncidence(
tblGraphNumerator %>% filter(sex == "men"),
tblDenominator %>% filter(sex == "men"),
lstGroupVar
) -> tblTempMale
fCalculateIncidence(
tblGraphNumerator %>% filter(sex == "women"),
tblDenominator %>% filter(sex == "women"),
lstGroupVar
) -> tblTempFemale
fCalculateIncidence(tblGraphNumerator,
tblDenominator,
lstGroupVar) -> tblTemp
tblTempMale %>% fPlotIncidence(
strTitle = "Male",
strGroupBy = ggVarGroupBy,
strNameGroupBy = ggNameGroupBy,
strSmooth = strSmoother,
numCrudeGlobalIncidence = numCrudeGlobalIncidence
) -> ggTempMale
tblTempFemale %>% fPlotIncidence(
strTitle = "Female",
strGroupBy = ggVarGroupBy,
strNameGroupBy = ggNameGroupBy,
strSmooth = strSmoother,
numCrudeGlobalIncidence = numCrudeGlobalIncidence
) -> ggTempFemale
fCalculateIncidence(tblNumerator, tblDenominator, c("sha")) %>%
mutate(sha = gsub("Yorkshire and the Humber", "Yorkshire \\& Humber", sha)) %>%
fPlotBoxIncidence(strX = "sha",
strY = "Incidence",
strTitle = "Regions",
strGroupBy = "sha",
strNameGroupBy = "Regions",
numCrudeGlobalIncidence =  numCrudeGlobalIncidence ,
lstYLim =  c(0,15)) -> ggTemp
ggFig <- ggTemp + ggTempMale + ggTempFemale + plot_layout(axes = "collect", axis_titles = "collect", guides = "collect") & theme(legend.position = 'bottom')
ggFig %>% fSavePlot(strGraphTitle,strSmoother, w = 14, h = 6)
lstGroupVar = c("qimd", "ageband")
ggVarGroupBy = "qimd"
ggNameGroupBy = "Qunitiled index of \nmultiple deprivation"
strGraphTitle = "AgeQIMD"
strSmoother = "loess"
fCalculateIncidence(
tblGraphNumerator %>% filter(sex == "men"),
tblDenominator %>% filter(sex == "men"),
lstGroupVar
) -> tblTempMale
fCalculateIncidence(
tblGraphNumerator %>% filter(sex == "women"),
tblDenominator %>% filter(sex == "women"),
lstGroupVar
) -> tblTempFemale
tblTempMale %>% fPlotIncidence(
strTitle = "Male",
strGroupBy = ggVarGroupBy,
strNameGroupBy = ggNameGroupBy,
strSmooth = strSmoother,
numCrudeGlobalIncidence = numCrudeGlobalIncidence
) -> ggTempMale
tblTempFemale %>% fPlotIncidence(
strTitle = "Female",
strGroupBy = ggVarGroupBy,
strNameGroupBy = ggNameGroupBy,
strSmooth = strSmoother,
numCrudeGlobalIncidence = numCrudeGlobalIncidence
) -> ggTempFemale
fCalculateIncidence(tblNumerator, tblDenominator, c("qimd")) %>%
fPlotBoxIncidence(strX = "qimd",
strY = "Incidence",
strTitle = "Deprivation",
strGroupBy = "qimd",
strNameGroupBy = "Deprivation",
numCrudeGlobalIncidence =  numCrudeGlobalIncidence ,
lstYLim =  c(0,15)) -> ggTemp
ggFig <- ggTemp + ggTempMale + ggTempFemale + plot_layout(axes = "collect", axis_titles = "collect", guides = "collect") & theme(legend.position = 'bottom')
ggFig %>% fSavePlot(strGraphTitle,strSmoother, w = 14, h = 6)
# Function to get the most frequently occurring value in a vector.
fGetMostFrequent <- function(tblInput){
tblInput %>%
table() %>%
sort(decreasing = TRUE) %>%
.[1] %>%
names() -> output
return(output)
}
# Function to calculate the time difference in years between two dates
fCalcYear <- function(dateFrom,dateTo){
return(interval(dateFrom, dateTo) / years(1))
}
# Function to save ggPlot
fSavePlot <-
function(plot,
title = NA,
subtitle = NA,
h = 8,
w = 12,
background = "white") {
ggsave(
plot,
filename = paste0(title, subtitle, ".png"),
path = "Figures/",
device = "png",
dpi = 800,
width = w,
height = h,
units = "in",
bg = background,
create.dir = TRUE
)
}
# Function to calculate incidence and poission CI
fCalculateIncidence <- function(tblNumerator, tblDenominator, strGroupVars)
{
tblNumerator %>%
group_by(across(all_of(strGroupVars))) %>%
summarise(diagnosed = sum(ever_diagnosed)) %>%
left_join(
tblDenominator %>%
group_by(across(all_of(strGroupVars))) %>%
summarise(patient_years = sum(total_patient_years))
) %>%
mutate(
Incidence = diagnosed / patient_years * 10000,
CI = pois.approx(diagnosed, pt = patient_years) * 10000
)
}
# Function to plot incidence and poission CI
fPlotIncidence <- function(tblData, strTitle, strGroupBy, strNameGroupBy, numCrudeGlobalIncidence, lstYLim = c(0,100)) {
tblData %>%
ggplot(aes(
x = ageband,
y = Incidence,
group = !!sym(strGroupBy),
colour = !!sym(strGroupBy)
)) +
scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
geom_hline(aes(yintercept = numCrudeGlobalIncidence)) +
geom_errorbar(aes(ymin = CI$lower, ymax = CI$upper), width = 0.05, alpha = 0.2) +
geom_point() +
geom_smooth(method = strSmooth, se = FALSE) +
ggsci::scale_color_aaas() +
theme_cowplot(12) +
ylab("Incidence rate per 10k person years") +
xlab("Age") +
coord_cartesian(ylim = lstYLim) +
labs(colour = strNameGroupBy, title = strTitle)
}
fPlotBoxIncidence <- function(tblData, strX, strY, strTitle, strGroupBy, boolStaggerXLbl = TRUE, strSmooth, numCrudeGlobalIncidence, lstYLim = c(0,100)) {
tblData %>%
ggplot(aes(
x = !!sym(strX),
y = !!sym(strY),
group = !!sym(strGroupBy),
colour = !!sym(strGroupBy)
)) +
{if(boolStaggerXLbl) scale_x_discrete(guide = guide_axis(n.dodge = 3))} +
geom_hline(aes(yintercept = numCrudeGlobalIncidence)) +
geom_errorbar(aes(ymin = CI$lower, ymax = CI$upper), width = 0.05, alpha = 0.2, show.legend = FALSE) +
geom_boxplot(show.legend = FALSE) +
ggsci::scale_color_aaas() +
theme_cowplot(12) +
ylab("Incidence rate per 10k person years") +
xlab("") +
coord_cartesian(ylim = lstYLim) +
labs(title = strTitle)
}
lstGroupVar = c("qimd", "ageband")
ggVarGroupBy = "qimd"
ggNameGroupBy = "Qunitiled index of \nmultiple deprivation"
strGraphTitle = "AgeQIMD"
strSmoother = "loess"
fCalculateIncidence(
tblGraphNumerator %>% filter(sex == "men"),
tblDenominator %>% filter(sex == "men"),
lstGroupVar
) -> tblTempMale
fCalculateIncidence(
tblGraphNumerator %>% filter(sex == "women"),
tblDenominator %>% filter(sex == "women"),
lstGroupVar
) -> tblTempFemale
tblTempMale %>% fPlotIncidence(
strTitle = "Male",
strGroupBy = ggVarGroupBy,
strNameGroupBy = ggNameGroupBy,
strSmooth = strSmoother,
numCrudeGlobalIncidence = numCrudeGlobalIncidence
) -> ggTempMale
# Function to get the most frequently occurring value in a vector.
fGetMostFrequent <- function(tblInput){
tblInput %>%
table() %>%
sort(decreasing = TRUE) %>%
.[1] %>%
names() -> output
return(output)
}
# Function to calculate the time difference in years between two dates
fCalcYear <- function(dateFrom,dateTo){
return(interval(dateFrom, dateTo) / years(1))
}
# Function to save ggPlot
fSavePlot <-
function(plot,
title = NA,
subtitle = NA,
h = 8,
w = 12,
background = "white") {
ggsave(
plot,
filename = paste0(title, subtitle, ".png"),
path = "Figures/",
device = "png",
dpi = 800,
width = w,
height = h,
units = "in",
bg = background,
create.dir = TRUE
)
}
# Function to calculate incidence and poission CI
fCalculateIncidence <- function(tblNumerator, tblDenominator, strGroupVars)
{
tblNumerator %>%
group_by(across(all_of(strGroupVars))) %>%
summarise(diagnosed = sum(ever_diagnosed)) %>%
left_join(
tblDenominator %>%
group_by(across(all_of(strGroupVars))) %>%
summarise(patient_years = sum(total_patient_years))
) %>%
mutate(
Incidence = diagnosed / patient_years * 10000,
CI = pois.approx(diagnosed, pt = patient_years) * 10000
)
}
# Function to plot incidence and poission CI
fPlotIncidence <- function(tblData, strTitle, strGroupBy, strNameGroupBy, numCrudeGlobalIncidence, strSmooth, lstYLim = c(0,100)) {
tblData %>%
ggplot(aes(
x = ageband,
y = Incidence,
group = !!sym(strGroupBy),
colour = !!sym(strGroupBy)
)) +
scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
geom_hline(aes(yintercept = numCrudeGlobalIncidence)) +
geom_errorbar(aes(ymin = CI$lower, ymax = CI$upper), width = 0.05, alpha = 0.2) +
geom_point() +
geom_smooth(method = strSmooth, se = FALSE) +
ggsci::scale_color_aaas() +
theme_cowplot(12) +
ylab("Incidence rate per 10k person years") +
xlab("Age") +
coord_cartesian(ylim = lstYLim) +
labs(colour = strNameGroupBy, title = strTitle)
}
fPlotBoxIncidence <- function(tblData, strX, strY, strTitle, strGroupBy, boolStaggerXLbl = TRUE, strSmooth, numCrudeGlobalIncidence, lstYLim = c(0,100)) {
tblData %>%
ggplot(aes(
x = !!sym(strX),
y = !!sym(strY),
group = !!sym(strGroupBy),
colour = !!sym(strGroupBy)
)) +
{if(boolStaggerXLbl) scale_x_discrete(guide = guide_axis(n.dodge = 3))} +
geom_hline(aes(yintercept = numCrudeGlobalIncidence)) +
geom_errorbar(aes(ymin = CI$lower, ymax = CI$upper), width = 0.05, alpha = 0.2, show.legend = FALSE) +
geom_boxplot(show.legend = FALSE) +
ggsci::scale_color_aaas() +
theme_cowplot(12) +
ylab("Incidence rate per 10k person years") +
xlab("") +
coord_cartesian(ylim = lstYLim) +
labs(title = strTitle)
}
lstGroupVar = c("qimd", "ageband")
ggVarGroupBy = "qimd"
ggNameGroupBy = "Qunitiled index of \nmultiple deprivation"
strGraphTitle = "AgeQIMD"
strSmoother = "loess"
fCalculateIncidence(
tblGraphNumerator %>% filter(sex == "men"),
tblDenominator %>% filter(sex == "men"),
lstGroupVar
) -> tblTempMale
fCalculateIncidence(
tblGraphNumerator %>% filter(sex == "women"),
tblDenominator %>% filter(sex == "women"),
lstGroupVar
) -> tblTempFemale
tblTempMale %>% fPlotIncidence(
strTitle = "Male",
strGroupBy = ggVarGroupBy,
strNameGroupBy = ggNameGroupBy,
strSmooth = strSmoother,
numCrudeGlobalIncidence = numCrudeGlobalIncidence
) -> ggTempMale
tblTempFemale %>% fPlotIncidence(
strTitle = "Female",
strGroupBy = ggVarGroupBy,
strNameGroupBy = ggNameGroupBy,
strSmooth = strSmoother,
numCrudeGlobalIncidence = numCrudeGlobalIncidence
) -> ggTempFemale
fCalculateIncidence(tblNumerator, tblDenominator, c("qimd")) %>%
fPlotBoxIncidence(strX = "qimd",
strY = "Incidence",
strTitle = "Deprivation",
strGroupBy = "qimd",
boolStaggerXLbl = FALSE,
numCrudeGlobalIncidence =  numCrudeGlobalIncidence ,
lstYLim =  c(0,15)) -> ggTemp
ggFig <- ggTemp + ggTempMale + ggTempFemale + plot_layout(axes = "collect", axis_titles = "collect", guides = "collect") & theme(legend.position = 'bottom')
ggFig %>% fSavePlot(strGraphTitle,strSmoother, w = 14, h = 6)
install.packages("fmsb")
library(multidplyr)
library(tidyverse)
library(readxl)
library(lubridate)
library(magrittr)
library(cowplot)
library(ggh4x)
library(epitools)
library(santoku)
library(patchwork)
fCalculateIncidence(tblGraphNumerator,
tblDenominator,
c("sex")) %>%
mutate(sex = gsub("^men","Male", sex),
sex = gsub("^women","Female", sex))
fmsb::rateratio(325,293,356265,377026)
fCalculateIncidence(tblNumerator, tblDenominator, c("qimd"))
fmsb::rateratio(154,117,137313.1,146149.4)
fCalculateIncidence(tblNumerator, tblDenominator, c("sha"))
fmsb::rateratio(112,55,96884.86,116162.90)
