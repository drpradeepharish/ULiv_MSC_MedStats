{"frames":[{"func":"pop_snomed_assignment %>% mutate(event_date = ymd(event_date), \n    dob = ymd(dob)) %>% mutate(is_cancer_relevant = ifelse(snomedctdescriptionid %in% \n    dLungCancerCodes$snomedctdescriptionid | medcodeid %in% dLungCancerCodes$medcodeid, \n    TRUE, FALSE), is_cancer_death = ifelse(snomedctdescriptionid <  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mutate(., censor_date = case_when(is_cancer_relevant == TRUE ~ \n    event_date, is_cancer_death == TRUE ~ event_date, is_cancer_death == \n    FALSE ~ event_date, is.na(is_cancer_death) ~ \"2020-12-31\", \n    .default = NA))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mutate.data.frame(., censor_date = case_when(is_cancer_relevant == \n    TRUE ~ event_date, is_cancer_death == TRUE ~ event_date, \n    is_cancer_death == FALSE ~ event_date, is.na(is_cancer_death) ~ \n        \"2020-12-31\", .default = NA))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mutate_cols(.data, dplyr_quosures(...), by)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"withCallingHandlers(for (i in seq_along(dots)) {\n    poke_error_context(dots, i, mask = mask)\n    context_poke(\"column\", old_current_column)\n    new_columns <- mutate_col(dots[[i]], data, mask, new_columns) ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mutate_col(dots[[i]], data, mask, new_columns)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mask$eval_all_mutate(quo)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval()","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"case_when(is_cancer_relevant == TRUE ~ event_date, is_cancer_death == \n    TRUE ~ event_date, is_cancer_death == FALSE ~ event_date, \n    is.na(is_cancer_death) ~ \"2020-12-31\", .default = NA)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"vec_case_when(conditions = conditions, values = values, conditions_arg = \"\", \n    values_arg = \"\", default = .default, default_arg = \".default\", \n    ptype = .ptype, size = .size, call = current_env())","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"vec_ptype_common(!!!everything, .ptype = ptype, .call = call)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"(function () \nvec_default_ptype2(x = x, y = y, x_arg = x_arg, y_arg = y_arg, \n    call = call, `vctrs:::from_dispatch` = `vctrs:::from_dispatch`, \n    `vctrs:::s3_fallback` = `vctrs:::s3_fallback`))()","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"vec_default_ptype2(x = x, y = y, x_arg = x_arg, y_arg = y_arg, \n    call = call, `vctrs:::from_dispatch` = `vctrs:::from_dispatch`, \n    `vctrs:::s3_fallback` = `vctrs:::s3_fallback`)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"withRestarts(stop_incompatible_type(x, y, x_arg = x_arg, y_arg = y_arg, \n    `vctrs:::from_dispatch` = match_from_dispatch(...), call = call), \n    vctrs_restart_ptype2 = function(ptype) {\n        ptype ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"withOneRestart(expr, restarts[[1L]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"doWithOneRestart(return(expr), restart)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop_incompatible_type(x, y, x_arg = x_arg, y_arg = y_arg, `vctrs:::from_dispatch` = match_from_dispatch(...), \n    call = call)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop_incompatible(x, y, x_arg = x_arg, y_arg = y_arg, details = details, \n    ..., message = message, class = c(class, subclass, \"vctrs_error_incompatible_type\"), \n    call = call)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop_vctrs(message, class = c(class, \"vctrs_error_incompatible\"), \n    x = x, y = y, details = details, ..., call = call)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"abort(message, class = c(class, \"vctrs_error\"), ..., call = call)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"signal_abort(cnd, .file)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"signalCondition(cnd)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"(function (cnd) \n{\n    local_error_context(dots, i = frame[[i_sym]], mask = mask)\n    if (inherits(cnd, \"dplyr:::internal_error\")) { ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"abort(message, class = error_class, parent = parent, call = error_call)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"signal_abort(cnd, .file)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop(fallback)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error in mutate(., censor_date = case_when(is_cancer_relevant == TRUE ~  : \n  \n\u001B[1mCaused by error in `case_when()`:\u001B[22m\n\u001B[33m!\u001B[39m Can't combine `..1 (right)` <date> and `..4 (right)` <character>.\n"}