"0","# Create a parallel processing cluster using available CPU cores"
"0","pllCluster <- new_cluster(parallel::detectCores() - 4)"
"0",""
"0","# Distribute data across the cluster by patient ID"
"0","tblDataSummary %>%"
"0","  group_by(pid) %>%"
"0","  partition(pllCluster) -> pllDataSummary"
"0",""
"0","# Load required libraries and functions on all cluster nodes"
"0","cluster_library(pllCluster, ""tidyverse"")"
"0","cluster_copy(pllCluster, c(""fCalcYear"", ""dateFrom""))"
"0",""
"0","# We are now going to achieve two objectives with the next section. We are going to calculate all ages a person experienced in the study, and the total person- year they contributed to the study after taking into account their dob"
"0",""
"0","# We initially calculate age at study start and censor date. Then we will create a new row for each age the patient experienced in the study. Eg. if a patient born on 2000 participates in the study from 2014 till 2018 then the patient will have been 14,15,16,17, and 18. This is important for age specific person year calculations as they will have contributed person years over a range of ages."
"0",""
"0","pllDataSummary %>%"
"0","  mutate("
"0","    age_at_start = fCalcYear(dob, dateFrom) %>% floor(),"
"0","    age_at_censor = fCalcYear(dob, censor_date) %>% floor(),"
"0","    age_seq = map2(age_at_start, age_at_censor, seq)"
"0","  ) %>%"
"0","  collect() -> Temp"
"0",""
"0","Temp %<>%"
"0","  unnest_longer(age_seq) #unnesting not implemented in multidplyr. So we have to exit out of multidplyr and reparallelise."
"0",""
"0","# While we have calculated the ages the patient contributed, we have to calculate the fractional person-years per age they took part in the study. Eg. a patient born on 2000-01-01 vs 2000-06-01 will have contributed different person years (by 6 months) at any point in the study. This approach takes their dob into account and calculates the correct factional person-years contributed."
"0","Temp %<>%"
"0","  group_by(pid) %>%"
"0","  partition(pllCluster) %>%"
"0","  mutate("
"0","    year_start = pmax(dateFrom, ymd(dob) + years(age_seq)),"
"0","    year_end = pmin(censor_date, ymd(dob) + years(age_seq + 1)),"
"0","    patient_years = fCalcYear(year_start, year_end)"
"0","  ) %>%"
"0","  collect() "
"0",""
"0","  # For the edge cases where the patient's birthday is after the censor date. The fraction of the year up to the censor date is correctly calculated in the previous row. However, the loop may generate an additional row for the next birthday, resulting in a negative 'patient_years' value because the interval extends past the censor date. This filter ensures only valid rows are kept by removing any where the calculated interval is invalid."
"0",""
"0","# Group by demographic and age attributes, then calculate total patient-years per group"
"0","Temp %>%"
"0","  filter(patient_years >= 0) %>% "
"0","  group_by(sex, qimd, ethnicity, sha, smoking_status, age = age_seq) %>%"
"0","  partition(pllCluster) %>%"
"0","  summarise(total_patient_years = sum(patient_years, na.rm = TRUE)) %>% "
"0","  collect() %>% "
"0","  arrange(age) %>%"
"0","  filter(age >= intAgeMin &"
"0","           age <= intAgeMax) %>%"
"0","  mutate(ageband = chop_width("
"0","    age,"
"0","    start = 25,"
"0","    width = 5,"
"0","    labels = lbl_discrete()"
"0","  ))  -> tblDenominator"
"0",""
"0","# Save the final aggregated denominator table to a CSV file"
"0","#tblDenominator %>% write_csv(""tblDenominator.csv"")"
"0",""
"0","# Clean variables"
"0","#rm(Temp, pllCluster, pllDataSummary, tblData, tblLungCancerCodes)"
"0",""
"0",""
